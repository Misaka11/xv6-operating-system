diff -uNr /home/proj4-base/defs.h ./defs.h
--- /home/proj4-base/defs.h	2019-05-11 18:11:10.082615062 +0800
+++ ./defs.h	2019-05-23 18:43:16.000000000 +0800
@@ -68,6 +68,9 @@
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+void 			incRef(uint pa);
+void 			decRef(uint pa);
+uint 			getRef(uint pa);
 
 // kbd.c
 void            kbdintr(void);
@@ -185,6 +188,7 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+void            pgflt_hdl();
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -uNr /home/proj4-base/kalloc.c ./kalloc.c
--- /home/proj4-base/kalloc.c	2019-05-11 18:11:10.082615062 +0800
+++ ./kalloc.c	2019-05-23 18:42:37.000000000 +0800
@@ -21,6 +21,7 @@
   struct spinlock lock;
   int use_lock;
   struct run *freelist;
+  uint pgRef[PHYSTOP >> PGSHIFT];
 } kmem;
 
 // Initialization happens in two phases.
@@ -48,8 +49,10 @@
 {
   char *p;
   p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE){
+    kmem.pgRef[V2P(p) >> PGSHIFT] = 0;  // set reference = 0 when free
     kfree(p);
+  }
 }
 //PAGEBREAK: 21
 // Free the page of physical memory pointed at by v,
@@ -65,14 +68,24 @@
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
+  //memset(v, 1, PGSIZE);
 
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = (struct run*)v;
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  free_frame_cnt++;
+  //r->next = kmem.freelist;
+  //kmem.freelist = r;
+  if(kmem.pgRef[V2P(v) >> PGSHIFT] > 0)         // Decrement the reference when someone frees it
+    --kmem.pgRef[V2P(v) >> PGSHIFT];
+
+  if(kmem.pgRef[V2P(v) >> PGSHIFT] == 0){       // Free the page only if there are no references to the page
+    // Fill with junk to catch dangling refs.
+    memset(v, 1, PGSIZE);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    free_frame_cnt++;
+  }
+  
   if(kmem.use_lock)
     release(&kmem.lock);
 }
@@ -90,10 +103,42 @@
   r = kmem.freelist;
   if(r){
     kmem.freelist = r->next;
+    kmem.pgRef[V2P((char*)r) >> PGSHIFT] = 1;// reference is set to 1 when it is allocated
     free_frame_cnt--;
   }
   if(kmem.use_lock)
     release(&kmem.lock);
   return (char*)r;
 }
+// function about reference
+void decRef(uint pa)
+{ 
+  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
+    panic("decRef");
+
+  acquire(&kmem.lock);
+  --kmem.pgRef[pa >> PGSHIFT];
+  release(&kmem.lock);
+}
+
+void incRef(uint pa)
+{
+  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
+    panic("incRef");
+
+  acquire(&kmem.lock);
+  ++kmem.pgRef[pa >> PGSHIFT];
+  release(&kmem.lock);
+}
+uint getRef(uint pa)
+{
+  if(pa < (uint)V2P(end) || pa >= PHYSTOP)
+    panic("getRef");
+  uint count;
+
+  acquire(&kmem.lock);
+  count = kmem.pgRef[pa >> PGSHIFT];
+  release(&kmem.lock);
 
+  return count;
+}
\ No newline at end of file
diff -uNr /home/proj4-base/proc.c ./proc.c
--- /home/proj4-base/proc.c	2019-05-11 18:11:10.082615062 +0800
+++ ./proc.c	2019-05-20 11:15:41.000000000 +0800
@@ -7,6 +7,7 @@
 #include "proc.h"
 #include "spinlock.h"
 
+
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
diff -uNr /home/proj4-base/sysproc.c ./sysproc.c
--- /home/proj4-base/sysproc.c	2019-05-11 18:11:10.082615062 +0800
+++ ./sysproc.c	2019-05-22 18:19:30.000000000 +0800
@@ -50,9 +50,22 @@
 
   if(argint(0, &n) < 0)
     return -1;
-  addr = myproc()->sz;
+  /*addr = myproc()->sz;
   if(growproc(n) < 0)
+    return -1;*/
+
+  // if n<0, relese memory as before, so as n=0
+  addr = myproc()->sz;
+  if(n <= 0){
+    if(growproc(n) < 0) return -1;
+    return addr;
+  }
+    
+  // not allocate memory actually
+  // but detect whether n is so big
+  if(addr + n >= KERNBASE)
     return -1;
+  myproc()->sz += n;
   return addr;
 }
 
diff -uNr /home/proj4-base/trap.c ./trap.c
--- /home/proj4-base/trap.c	2019-05-11 18:11:10.082615062 +0800
+++ ./trap.c	2019-05-22 19:53:47.000000000 +0800
@@ -47,6 +47,9 @@
   }
 
   switch(tf->trapno){
+  case T_PGFLT:
+    pgflt_hdl();
+    break;
   case T_IRQ0 + IRQ_TIMER:
     if(cpuid() == 0){
       acquire(&tickslock);
diff -uNr /home/proj4-base/vm.c ./vm.c
--- /home/proj4-base/vm.c	2019-05-11 18:11:10.082615062 +0800
+++ ./vm.c	2019-05-23 19:03:35.000000000 +0800
@@ -68,8 +68,8 @@
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_P)
-      panic("remap");
+    /*if(*pte & PTE_P)
+      panic("remap");*/
     *pte = pa | perm | PTE_P;
     if(a == last)
       break;
@@ -315,6 +315,7 @@
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
+/*
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
@@ -339,6 +340,31 @@
 
 bad:
   freevm(d);
+  return 0;*/
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P)) continue;
+      //panic("copyuvm: page not present");
+    *pte &= ~PTE_W;                      // read only
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
+      goto bad;
+    incRef(pa);
+  }
+  lcr3(V2P(pgdir));                     // Flush TLB 
+  return d;
+
+bad:
+  freevm(d);
+  lcr3(V2P(pgdir));
   return 0;
 }
 
@@ -390,3 +416,96 @@
 //PAGEBREAK!
 // Blank page.
 
+
+//PAGEBREAK T_PGFLT
+void
+pgflt_hdl(uint errorcode){
+
+    // get the faulting virtual address from the CR2 register 
+    uint va = rcr2();
+    pte_t *pte;
+    struct proc* proc = myproc();
+    // access address fault    
+    if( va >= KERNBASE || va > PGROUNDUP(proc->sz)){
+      // mark the process as killed
+      cprintf("pid %d memtest: trap %d err %d on cpu %d eip 0x%x addr 0x%x--kill proc\n",
+      proc->pid,proc->tf->trapno,proc->tf->err, cpuid(),proc->tf->eip,va);
+      
+      proc->killed = 1;
+      return;
+    }
+    // if pte is not present, allocate a new page
+    // if page is present, and belong to user, and read only,  if ref>1,allocate one new page, if ref = 1,change to writeable
+    // if page is not present ,allocate a new page
+    if((pte = walkpgdir(proc->pgdir, (void*)va, 0)) == 0){
+      char *mem = kalloc();
+      if(mem == 0){
+        cprintf("allocuvm out of memory\n");
+        return;
+      }
+      memset(mem, 0, PGSIZE);
+      if(mappages(proc->pgdir, (char*)PGROUNDDOWN(va), PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+        cprintf("allocuvm out of memory (2)\n");
+        kfree(mem);
+        return;
+      }
+      *pte = V2P(mem) | PTE_P | PTE_U ;
+      return;
+    }
+    else{
+      if((*pte & PTE_P) && (*pte & PTE_U) && !(*pte & PTE_W)){
+        // get the physical address from the given page table entry 
+        uint pa = PTE_ADDR(*pte);
+        uint refCount = getRef(pa);
+        char *mem;
+
+        // Current process is the first one that tries to write to this page
+        if(refCount > 1) {
+            // allocate a new memory page for the process
+            if((mem = kalloc()) == 0) {
+              cprintf("Page fault out of memory, kill proc %s with pid %d\n", proc->name, proc->pid);
+              proc->killed = 1;
+              return;
+            }
+            memmove(mem, (char*)P2V(pa), PGSIZE);
+            *pte = V2P(mem) | PTE_P | PTE_U | PTE_W;
+
+            // ref-1
+            decRef(pa);
+        }
+        else if(refCount == 1){
+          *pte |= PTE_W;
+        }
+        else{
+          panic("pagefault reference error\n");
+        }
+      }
+      else if(!(*pte & PTE_P)){
+        char *mem = kalloc();
+        if(mem == 0){
+          cprintf("allocuvm out of memory\n");
+          return;
+        }
+        memset(mem, 0, PGSIZE);
+        if(mappages(proc->pgdir, (char*)PGROUNDDOWN(va), PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+          cprintf("allocuvm out of memory (2)\n");
+          kfree(mem);
+          return;
+        }
+        *pte = V2P(mem) | PTE_P | PTE_U ;
+        return;
+      }
+      //other error
+      else{
+          // mark the process as killed
+        cprintf("pid %d memtest: trap %d err %d on cpu %d eip 0x%x addr 0x%x--kill proc\n",
+        proc->pid,proc->tf->trapno,proc->tf->err, cpuid(),proc->tf->eip,va);
+        
+        proc->killed = 1;
+        return;
+      }
+    }
+
+    // Flush TLB
+    lcr3(V2P(proc->pgdir));
+}
\ No newline at end of file
