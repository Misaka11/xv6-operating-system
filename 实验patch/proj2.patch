diff -uNr /home/proj2-base/defs.h ./defs.h
--- /home/proj2-base/defs.h	2019-04-13 16:12:38.562661777 +0800
+++ ./defs.h	2019-04-25 13:11:28.000000000 +0800
@@ -120,6 +120,11 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             clone(void *(*)(void *),void *,void *);
+void            join(int,void **,void **);
+void            thread_exit(void *);
+int             set_priority(int,int);
+int             enable_sched_display(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -uNr /home/proj2-base/param.h ./param.h
--- /home/proj2-base/param.h	2019-04-13 16:12:38.562661777 +0800
+++ ./param.h	2019-04-24 20:34:58.000000000 +0800
@@ -1,5 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
+#define USTACKSIZE 4096  // size of per-process user stack
 #define NCPU          8  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
diff -uNr /home/proj2-base/proc.c ./proc.c
--- /home/proj2-base/proc.c	2019-04-13 16:12:38.562661777 +0800
+++ ./proc.c	2019-04-25 20:17:12.000000000 +0800
@@ -14,6 +14,9 @@
 
 static struct proc *initproc;
 
+int display_enabled = 0;
+int prior_new = 0;
+
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -98,6 +101,12 @@
   }
   sp = p->kstack + KSTACKSIZE;
 
+  //set default priority
+  set_priority(p->pid,2); 
+
+  //set process isthread default 0
+  p->isthread = 0;
+
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
   p->tf = (struct trapframe*)sp;
@@ -255,9 +264,19 @@
   // Pass abandoned children to init.
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
+      if(p->isthread == 1){
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+      }else{
+        p->parent = initproc;
+        if(p->state == ZOMBIE)
+          wakeup1(initproc);
+      }
     }
   }
 
@@ -322,6 +341,7 @@
 void
 scheduler(void)
 {
+  int i,flag;
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
@@ -332,23 +352,34 @@
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+    prior_new = 0;
+    for(i=1;i<=3;){
+      flag = 0;
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+        if(p->prior == i){
+        if(p->state != RUNNABLE)
+          continue;
+        // Switch to chosen process.  It is the process's job
+        // to release ptable.lock and then reacquire it
+        // before jumping back to us.
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+        flag = 1;
+      }
+      if(prior_new > 0 && prior_new < i){
+        prior_new = 0;
+        break;
+      }
+      if(!flag) i++;
     }
     release(&ptable.lock);
 
@@ -376,6 +407,8 @@
     panic("sched running");
   if(readeflags()&FL_IF)
     panic("sched interruptible");
+  if(display_enabled)
+    cprintf("%d - ",p->pid);
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
   mycpu()->intena = intena;
@@ -460,8 +493,12 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
       p->state = RUNNABLE;
+      if(prior_new == 0) prior_new = p->prior;
+      else if(p->prior < prior_new) prior_new = p->prior;
+    }
+      
 }
 
 // Wake up all processes sleeping on chan.
@@ -532,3 +569,160 @@
     cprintf("\n");
   }
 }
+
+
+int clone(void *(*fn)(void *), void *stack,void *arg){
+  int i, pid;
+  struct proc *np;
+  struct proc *curproc = myproc();
+  void *sp;
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy process state from proc.
+  np->pgdir = curproc->pgdir;
+  np->sz = curproc->sz;
+  //np->parent = curproc;
+  *np->tf = *curproc->tf;
+
+  // If process is thread
+  // add isthread in PCB
+  if(curproc->isthread == 1)
+    np->parent = curproc->parent;
+  else
+    np->parent = curproc;
+  np->isthread = 1;
+
+  // next instruction
+  np->tf->eip = (uint)fn;
+
+  //  stack
+  np->ustack = (char *)stack;
+  sp = (char *)stack + USTACKSIZE - 4;
+  *(uint *)sp = (uint)arg;
+  sp -=4;
+  *(uint *)sp = 0xffffffff;
+
+  np->tf->ebp = np->tf->esp = (uint)sp;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+  pid = np->pid;
+
+  acquire(&ptable.lock);
+
+  np->state = RUNNABLE;
+
+  release(&ptable.lock);
+
+  return pid;
+}
+
+void join(int tid, void **ret_p, void **stack){
+  struct proc *p;
+  int havekids;
+  struct proc *curproc = myproc();
+
+  acquire(&ptable.lock);
+  for(;;){
+    havekids = 0;
+    for(p=ptable.proc;p<&ptable.proc[NPROC];p++){
+      if(p->parent != curproc || p->isthread != 1)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        *stack = (char *)p->ustack;
+        *(uint*)ret_p = (uint)p->tf->eax;
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return;
+      }
+    }
+
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return;
+    }
+    sleep(curproc,&ptable.lock);
+  }
+}
+
+void thread_exit(void *ret){
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd]){
+      fileclose(curproc->ofile[fd]);
+      curproc->ofile[fd] = 0;
+    }
+  }
+  //ret
+  curproc->tf->eax = (uint)ret;
+  begin_op();
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+  sched();
+  panic("zombie exit");
+}
+
+int set_priority(int pid, int prior){
+  struct proc *p;
+  
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      p->prior = prior;
+      
+      if (prior_new == 0) prior_new = prior;
+      else if (prior_new > prior) prior_new = prior;
+    }
+  }
+  release(&ptable.lock);
+  return 0;
+}
+
+int enable_sched_display(int i){
+  display_enabled = i;
+  return 0;
+}
diff -uNr /home/proj2-base/proc.h ./proc.h
--- /home/proj2-base/proc.h	2019-04-13 16:12:38.562661777 +0800
+++ ./proc.h	2019-04-25 18:55:50.000000000 +0800
@@ -39,6 +39,7 @@
   uint sz;                     // Size of process memory (bytes)
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
+  char *ustack;                // Bottom of user stack for this process
   enum procstate state;        // Process state
   int pid;                     // Process ID
   struct proc *parent;         // Parent process
@@ -49,6 +50,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int isthread;               // If process is thread
+  int prior;                  // Process prior
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -uNr /home/proj2-base/syscall.c ./syscall.c
--- /home/proj2-base/syscall.c	2019-04-13 16:12:38.562661777 +0800
+++ ./syscall.c	2019-04-25 13:13:40.000000000 +0800
@@ -104,6 +104,11 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_shutdown(void);
+extern int sys_clone(void);
+extern int sys_join(void);
+extern int sys_thread_exit(void);
+extern int sys_set_priority(void);
+extern int sys_enable_sched_display(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +133,11 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_shutdown] sys_shutdown,
+[SYS_clone]   sys_clone,
+[SYS_join]    sys_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_set_priority] sys_set_priority,
+[SYS_enable_sched_display] sys_enable_sched_display,
 };
 
 void
diff -uNr /home/proj2-base/sysproc.c ./sysproc.c
--- /home/proj2-base/sysproc.c	2019-04-13 16:12:38.562661777 +0800
+++ ./sysproc.c	2019-04-25 19:58:05.000000000 +0800
@@ -94,4 +94,65 @@
 sys_shutdown(void){
   outw(0x604, 0x2000);
   return 0;
+}
+
+int
+sys_clone(void){
+  void *fn;
+  void *stack;
+  void *arg;
+  if(argptr(0,(char **)&fn,sizeof(void *))<0)
+    return -1;
+  if(argptr(1,(char **)&stack,sizeof(void *))<0)
+    return -1;
+  if(argptr(2,(char **)&arg,sizeof(void *))<0)
+    return -1;
+
+
+  return clone(fn,stack,arg);
+}
+
+int
+sys_join(void){
+  int tid;
+  void **ret_p;
+  void **stack;
+  if(argint(0,&tid)<0)
+    return -1;
+  if(argptr(1,(char **)&ret_p,sizeof(void **))<0)
+    return -1;
+  if(argptr(2,(char **)&stack,sizeof(void **))<0)
+    return -1;
+  join(tid,ret_p,stack);
+
+  return 0;
+}
+
+int
+sys_thread_exit(){
+  void *ret;
+  if(argptr(0,(char **)&ret,sizeof(void *))<0)
+    return -1;
+  thread_exit(ret);
+  return 0;
+}
+
+int sys_set_priority(void){
+  int pid;
+  int prior;
+  if(argint(0,&pid) < 0)
+    return -1;
+  if(argint(1,&prior) < 0)
+    return -1;
+  set_priority(pid,prior);
+  return 0;
+}
+
+int
+sys_enable_sched_display(void){
+  int i;
+  if(argint(0,&i)<0)
+    return -1;
+  enable_sched_display(i);
+  return 0;
 }
\ No newline at end of file
diff -uNr /home/proj2-base/trap.c ./trap.c
--- /home/proj2-base/trap.c	2019-04-13 16:12:38.562661777 +0800
+++ ./trap.c	2019-04-25 19:55:27.000000000 +0800
@@ -80,6 +80,9 @@
 
   //PAGEBREAK: 13
   default:
+    if(tf->eip == 0xffffffff){
+      thread_exit((void *)tf->eax);
+    }
     if(myproc() == 0 || (tf->cs&3) == 0){
       // In kernel, it must be our mistake.
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
diff -uNr /home/proj2-base/xthread.c ./xthread.c
--- /home/proj2-base/xthread.c	2019-04-13 16:12:38.562661777 +0800
+++ ./xthread.c	2019-04-24 20:37:01.000000000 +0800
@@ -8,23 +8,24 @@
 
 int xthread_create(int * tid, void * (* start_routine)(void *), void * arg)
 {
-    // add your implementation here ...
-    return 0;
-   
+    char *stack = malloc(sizeof(char) * 4096);
+    if(stack == 0) return -1;
+    *tid = clone(start_routine, (void *)stack, arg);
+    if(*tid == -1) return -1;
+
+    return 1;
 }
 
 
 void xthread_exit(void * ret_val_p)
 {
-    // add your implementation here ...
-   
-    
+   thread_exit(ret_val_p);
 }
 
 
 void xthread_join(int tid, void ** retval)
 {
-    // add your implementation here ...
-   
-    
+    char *stack;
+    join(tid, retval, (void **)&stack);
+    free(stack);   
 }
